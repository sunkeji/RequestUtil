package com.kejis.requestutil.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.kejis.requestutil.bean.DownBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DOWN_BEAN".
*/
public class DownBeanDao extends AbstractDao<DownBean, Long> {

    public static final String TABLENAME = "DOWN_BEAN";

    /**
     * Properties of entity DownBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property ApkName = new Property(1, String.class, "apkName", false, "APK_NAME");
        public final static Property ApkLogo = new Property(2, String.class, "apkLogo", false, "APK_LOGO");
        public final static Property ApkSavePath = new Property(3, String.class, "apkSavePath", false, "APK_SAVE_PATH");
        public final static Property ApkTotalLength = new Property(4, long.class, "apkTotalLength", false, "APK_TOTAL_LENGTH");
        public final static Property ApkDownLength = new Property(5, long.class, "apkDownLength", false, "APK_DOWN_LENGTH");
        public final static Property ApkDownState = new Property(6, int.class, "apkDownState", false, "APK_DOWN_STATE");
        public final static Property ApkUrl = new Property(7, String.class, "apkUrl", false, "APK_URL");
        public final static Property UpdateProgress = new Property(8, boolean.class, "updateProgress", false, "UPDATE_PROGRESS");
    }


    public DownBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DownBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DOWN_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"APK_NAME\" TEXT," + // 1: apkName
                "\"APK_LOGO\" TEXT," + // 2: apkLogo
                "\"APK_SAVE_PATH\" TEXT," + // 3: apkSavePath
                "\"APK_TOTAL_LENGTH\" INTEGER NOT NULL ," + // 4: apkTotalLength
                "\"APK_DOWN_LENGTH\" INTEGER NOT NULL ," + // 5: apkDownLength
                "\"APK_DOWN_STATE\" INTEGER NOT NULL ," + // 6: apkDownState
                "\"APK_URL\" TEXT," + // 7: apkUrl
                "\"UPDATE_PROGRESS\" INTEGER NOT NULL );"); // 8: updateProgress
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DOWN_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DownBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String apkName = entity.getApkName();
        if (apkName != null) {
            stmt.bindString(2, apkName);
        }
 
        String apkLogo = entity.getApkLogo();
        if (apkLogo != null) {
            stmt.bindString(3, apkLogo);
        }
 
        String apkSavePath = entity.getApkSavePath();
        if (apkSavePath != null) {
            stmt.bindString(4, apkSavePath);
        }
        stmt.bindLong(5, entity.getApkTotalLength());
        stmt.bindLong(6, entity.getApkDownLength());
        stmt.bindLong(7, entity.getApkDownState());
 
        String apkUrl = entity.getApkUrl();
        if (apkUrl != null) {
            stmt.bindString(8, apkUrl);
        }
        stmt.bindLong(9, entity.getUpdateProgress() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DownBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String apkName = entity.getApkName();
        if (apkName != null) {
            stmt.bindString(2, apkName);
        }
 
        String apkLogo = entity.getApkLogo();
        if (apkLogo != null) {
            stmt.bindString(3, apkLogo);
        }
 
        String apkSavePath = entity.getApkSavePath();
        if (apkSavePath != null) {
            stmt.bindString(4, apkSavePath);
        }
        stmt.bindLong(5, entity.getApkTotalLength());
        stmt.bindLong(6, entity.getApkDownLength());
        stmt.bindLong(7, entity.getApkDownState());
 
        String apkUrl = entity.getApkUrl();
        if (apkUrl != null) {
            stmt.bindString(8, apkUrl);
        }
        stmt.bindLong(9, entity.getUpdateProgress() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public DownBean readEntity(Cursor cursor, int offset) {
        DownBean entity = new DownBean( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // apkName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // apkLogo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // apkSavePath
            cursor.getLong(offset + 4), // apkTotalLength
            cursor.getLong(offset + 5), // apkDownLength
            cursor.getInt(offset + 6), // apkDownState
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // apkUrl
            cursor.getShort(offset + 8) != 0 // updateProgress
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DownBean entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setApkName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setApkLogo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setApkSavePath(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setApkTotalLength(cursor.getLong(offset + 4));
        entity.setApkDownLength(cursor.getLong(offset + 5));
        entity.setApkDownState(cursor.getInt(offset + 6));
        entity.setApkUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUpdateProgress(cursor.getShort(offset + 8) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DownBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DownBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DownBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
